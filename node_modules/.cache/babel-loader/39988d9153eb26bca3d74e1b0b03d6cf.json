{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\RenderPokemon\\\\RenderPokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './RenderPokemon.css';\nimport RenderPokemonInfo from '../PokemonInfo';\nimport PokemonCard from '../PokemonCard/PokemonCard.js';\nimport PokemonTypeButton from '../PokemonTypeButton/PokemonTypeButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getPokemonData = async id => {\n  try {\n    const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + id);\n    const pokemonPromise = await res.json();\n    return pokemonPromise;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst RenderPokemon = text => {\n  _s();\n\n  const [rawPokemonList, setRawPokemonList] = useState([]);\n  const [[pokemonId, pokemon], setPokemon] = useState([0, []]);\n  const pokemonTypeList = ['grass', 'poison', 'fire', 'flying', 'water', 'bug', 'normal', 'electric', 'ground', 'fairy', 'fighting', 'psychic', 'rock', 'steel', 'ice', 'ghost', 'dragon'];\n  const [typesToDisplay, setTypesToDisplay] = useState([]);\n  const sortPokemonList = rawPokemonList.filter(poke => {\n    if (text.input === \"\") {\n      return poke;\n    } else {\n      return poke.name.toLowerCase().includes(text.input);\n    }\n  });\n\n  const updatePokemonId = e => {\n    console.log(e);\n    rawPokemonList.map(poke => {\n      if (poke.id == e.target.id) {\n        setPokemon([e.target.id, poke]);\n      }\n    });\n  };\n\n  const updateTypesToDisplay = e => {\n    if (typesToDisplay.length === 0) {\n      const newTypesList = [e.target.value];\n      setTypesToDisplay(newTypesList);\n    } else {\n      if (typesToDisplay.includes(e.target.value)) {\n        const newTypesList = typesToDisplay.filter(type => type !== e.target.value);\n        setTypesToDisplay(newTypesList);\n      } else {\n        const newTypesList = [e.target.value];\n        setTypesToDisplay(typesToDisplay.concat(newTypesList));\n      }\n    }\n  };\n\n  const resetTypesToDisplay = e => {};\n\n  const RenderPokemonCards = () => {\n    return sortPokemonList.map(poke => {\n      let toRender = true;\n\n      if (typesToDisplay.length === 0) {\n        toRender = true;\n      } else {\n        poke.types.map(typeData => {\n          if (typesToDisplay.includes(typeData.type.name)) {\n            toRender = true;\n          }\n        });\n      }\n\n      if (toRender) {\n        return /*#__PURE__*/_jsxDEV(PokemonCard, {\n          pokemonToUse: poke,\n          updateIdCall: updatePokemonId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n      }\n    });\n  };\n\n  useEffect(i => {\n    const promises = [];\n\n    for (let i = 1; i < 152; i++) {\n      promises.push(getPokemonData(i));\n    }\n\n    Promise.all(promises).then(results => {\n      setRawPokemonList(results);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: /*#__PURE__*/_jsxDEV(RenderPokemonCards, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: pokemonId === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click a pokemon!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(RenderPokemonInfo, {\n          pokemon: pokemon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type-container\",\n      children: [pokemonTypeList.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"type-button\",\n        onClick: updateTypesToDisplay,\n        children: /*#__PURE__*/_jsxDEV(PokemonTypeButton, {\n          typeString: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" Reset! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: typesToDisplay.map(type => /*#__PURE__*/_jsxDEV(PokemonTypeButton, {\n          typeString: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RenderPokemon, \"8oZmN0MFbsWUy4uyI3U2/0JMhEs=\");\n\n_c = RenderPokemon;\nexport default RenderPokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemon\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/RenderPokemon/RenderPokemon.js"],"names":["React","useEffect","useState","RenderPokemonInfo","PokemonCard","PokemonTypeButton","getPokemonData","id","res","fetch","pokemonPromise","json","e","console","log","RenderPokemon","text","rawPokemonList","setRawPokemonList","pokemonId","pokemon","setPokemon","pokemonTypeList","typesToDisplay","setTypesToDisplay","sortPokemonList","filter","poke","input","name","toLowerCase","includes","updatePokemonId","map","target","updateTypesToDisplay","length","newTypesList","value","type","concat","resetTypesToDisplay","RenderPokemonCards","toRender","types","typeData","i","promises","push","Promise","all","then","results"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './RenderPokemon.css'\r\nimport RenderPokemonInfo from '../PokemonInfo'\r\nimport PokemonCard from '../PokemonCard/PokemonCard.js'\r\nimport PokemonTypeButton from '../PokemonTypeButton/PokemonTypeButton.js';\r\n\r\n\r\nconst getPokemonData = async (id) => {\r\n  try {\r\n    const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + id);\r\n    const pokemonPromise = await res.json();\r\n    return pokemonPromise;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst RenderPokemon = (text) => {\r\n  const [rawPokemonList, setRawPokemonList] = useState([]);\r\n  const [[pokemonId, pokemon], setPokemon] = useState([0, []]);\r\n  const pokemonTypeList = ['grass', 'poison', 'fire', 'flying', 'water', 'bug', 'normal', 'electric', 'ground', 'fairy', 'fighting', 'psychic', 'rock', 'steel', 'ice', 'ghost', 'dragon'];\r\n  const [typesToDisplay, setTypesToDisplay] = useState([]);\r\n\r\n  const sortPokemonList = rawPokemonList.filter((poke) => {\r\n    if(text.input === \"\") {\r\n      return poke;\r\n    } else {\r\n      return poke.name.toLowerCase().includes(text.input);\r\n    }\r\n  })\r\n\r\n  const updatePokemonId = (e) => {\r\n    console.log(e);\r\n    rawPokemonList.map(poke => {\r\n      if(poke.id == e.target.id) {\r\n        setPokemon([e.target.id, poke]);\r\n      }\r\n    })\r\n  }\r\n\r\n  const updateTypesToDisplay = (e) => {\r\n    if(typesToDisplay.length === 0) {\r\n      const newTypesList = [e.target.value];\r\n      setTypesToDisplay(newTypesList);\r\n    } else {\r\n      if(typesToDisplay.includes(e.target.value)) {\r\n        const newTypesList = typesToDisplay.filter((type) => type !== e.target.value);\r\n        setTypesToDisplay(newTypesList);\r\n      } else {\r\n        const newTypesList = [e.target.value];\r\n        setTypesToDisplay(typesToDisplay.concat(newTypesList));\r\n      }\r\n    }\r\n  }\r\n\r\n  const resetTypesToDisplay = (e) => {\r\n\r\n  }\r\n\r\n  const RenderPokemonCards = () => {\r\n    return (\r\n      sortPokemonList.map((poke) => {\r\n        let toRender = true;\r\n        if(typesToDisplay.length === 0) {\r\n          toRender = true;\r\n        } else {\r\n          poke.types.map((typeData) => {\r\n            if(typesToDisplay.includes(typeData.type.name)) {\r\n              toRender = true;\r\n            }\r\n          })\r\n        }\r\n        if(toRender) {\r\n          return(\r\n            <PokemonCard pokemonToUse={poke} updateIdCall={updatePokemonId}/>\r\n          )\r\n        } else {\r\n          return (\r\n            <></>\r\n          )\r\n        }\r\n      })\r\n  \r\n    )\r\n  }\r\n  \r\n\r\n  useEffect((i) => {\r\n    const promises = [];\r\n    for (let i = 1; i < 152; i++) {\r\n      promises.push(getPokemonData(i));\r\n    }\r\n    Promise.all(promises).then((results)=>{\r\n      setRawPokemonList(results);\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <div className='content-parent'>\r\n      <div className='card-container'>\r\n        <RenderPokemonCards />\r\n      </div>\r\n      <div className='content-container'>\r\n        {(pokemonId === 0) ? (\r\n          <p>Click a pokemon!</p>\r\n        ) : (\r\n          <RenderPokemonInfo pokemon={pokemon} />\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className='type-container'>\r\n      {pokemonTypeList.map((type) => (\r\n        <div className='type-button' onClick={updateTypesToDisplay}>\r\n          <PokemonTypeButton typeString={type}></PokemonTypeButton>\r\n        </div>\r\n      ))}\r\n      <button> Reset! </button>\r\n      <div>\r\n        {typesToDisplay.map((type) => (\r\n          <PokemonTypeButton typeString={type}></PokemonTypeButton>\r\n        ))}\r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RenderPokemon;"]},"metadata":{},"sourceType":"module"}