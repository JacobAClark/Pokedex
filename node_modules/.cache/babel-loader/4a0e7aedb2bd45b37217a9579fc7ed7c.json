{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\PokemonCards.js\",\n    _s = $RefreshSig$();\n\nimport { type } from 'os';\nimport React, { useEffect, useState } from 'react';\nimport './PokemonCards.css';\nimport PokeColour from './TypeEnum.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RenderPokemon = text => {\n  _s();\n\n  const [rawPokemonList, setRawPokemonList] = useState([]);\n  const [[pokemonId, pokemon], setPokemon] = useState([0, []]);\n  const [typesToDisplay, setTypesToDisplay] = useState([]);\n  const pokemonTypeList = ['grass', 'poison', 'fire', 'flying', 'water', 'bug', 'normal', 'electric', 'ground', 'fairy', 'fighting', 'psychic', 'rock', 'steel', 'ice', 'ghost', 'dragon'];\n\n  const getPokemonData = async id => {\n    //Move this out somehow, to avoid calling on every render \n    try {\n      const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + id);\n      const pokemonPromise = await res.json();\n      return pokemonPromise;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sortPokemonList = rawPokemonList.filter(poke => {\n    if (text.input === \"\") {\n      return poke;\n    } else {\n      return poke.name.toLowerCase().includes(text.input);\n    }\n  });\n\n  const updatePokemonId = e => {\n    rawPokemonList.map(poke => {\n      if (poke.id == e.target.id) {\n        setPokemon([e.target.id, poke]);\n      }\n    });\n  };\n\n  const updateTypesToDisplay = e => {\n    if (typesToDisplay.includes(e.target.value)) {\n      const newTypesList = typesToDisplay.filter(type => type !== e.target.value);\n      setTypesToDisplay(newTypesList);\n    } else {\n      setTypesToDisplay(typesToDisplay.push(e.target.value));\n    }\n  };\n\n  useEffect(i => {\n    const promises = [];\n\n    for (let i = 1; i < 152; i++) {\n      promises.push(getPokemonData(i));\n    }\n\n    Promise.all(promises).then(results => {\n      setRawPokemonList(results);\n    });\n  }, []);\n\n  const PokemonTypeButton = props => {\n    const typeColour = PokeColour[props.typeString];\n    const colourRGB = [typeColour.slice(1, 3), typeColour.slice(3, 5), typeColour.slice(5, 7)];\n    const lighterColour = colourRGB.map(colour => Math.round(parseInt(colour, 16) * 1.4)).join();\n    const darkerColour = colourRGB.map(colour => Math.round(parseInt(colour, 16) * 0.6)).join();\n    let colour = 'rgb(0,0,0)';\n\n    if (Math.round(parseInt(colourRGB[2]) * 0.6) < 70) {\n      colour = 'rgb(255,255,255)';\n    }\n\n    const gradientString = 'rgb(' + lighterColour + ')' + ', rgb(' + darkerColour + ')';\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        backgroundImage: \"linear-gradient(120deg, \" + gradientString + \")\",\n        borderRadius: \"5px\",\n        height: '30px',\n        width: '80px',\n        color: colour\n      },\n      value: props.typeString,\n      onClick: updateTypesToDisplay,\n      children: props.typeString\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  };\n\n  const PokemonCard = props => {\n    const colours = [];\n    let gradientString = \"\";\n    props.pokemonToUse.types.map(typeData => colours.push(PokeColour[typeData.type.name]));\n\n    if (colours.length === 1) {\n      const colourRGB = [colours[0].slice(1, 3), colours[0].slice(3, 5), colours[0].slice(5, 7)];\n      const lighterColour = colourRGB.map(colour => Math.round(parseInt(colour, 16) * 1.4)).join();\n      const darkerColour = colourRGB.map(colour => Math.round(parseInt(colour, 16) * 0.6)).join();\n      gradientString = 'rgb(' + lighterColour + ')' + ', rgb(' + darkerColour + ')';\n    } else {\n      gradientString = colours[0] + ', ' + colours[1];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: \"linear-gradient(120deg, \" + gradientString + \")\",\n        height: '200px',\n        borderRadius: '5px'\n      },\n      id: props.pokemonToUse.id,\n      onClick: updatePokemonId,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/' + props.pokemonToUse.id + '.svg',\n        className: \"poke-img\",\n        id: props.pokemonToUse.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-text-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          id: props.pokemonToUse.id,\n          children: props.pokemonToUse.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: sortPokemonList.map(poke => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          id: poke.id,\n          children: /*#__PURE__*/_jsxDEV(PokemonCard, {\n            pokemonToUse: poke,\n            id: poke.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: pokemonId === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click a pokemon!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/' + pokemonId + '.svg',\n            className: \"big-poke-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Name - \", pokemon.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type-container\",\n      children: pokemonTypeList.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"type-button\",\n        children: /*#__PURE__*/_jsxDEV(PokemonTypeButton, {\n          typeString: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RenderPokemon, \"8oZmN0MFbsWUy4uyI3U2/0JMhEs=\");\n\n_c = RenderPokemon;\nexport default RenderPokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemon\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/PokemonCards.js"],"names":["type","React","useEffect","useState","PokeColour","RenderPokemon","text","rawPokemonList","setRawPokemonList","pokemonId","pokemon","setPokemon","typesToDisplay","setTypesToDisplay","pokemonTypeList","getPokemonData","id","res","fetch","pokemonPromise","json","e","console","log","sortPokemonList","filter","poke","input","name","toLowerCase","includes","updatePokemonId","map","target","updateTypesToDisplay","value","newTypesList","push","i","promises","Promise","all","then","results","PokemonTypeButton","props","typeColour","typeString","colourRGB","slice","lighterColour","colour","Math","round","parseInt","join","darkerColour","gradientString","backgroundImage","borderRadius","height","width","color","PokemonCard","colours","pokemonToUse","types","typeData","length"],"mappings":"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","sourcesContent":["import { type } from 'os';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './PokemonCards.css'\r\nimport PokeColour from './TypeEnum.ts'\r\n\r\nconst RenderPokemon = (text) => {\r\n  const [rawPokemonList, setRawPokemonList] = useState([]);\r\n  const [[pokemonId, pokemon], setPokemon] = useState([0, []]);\r\n  const [typesToDisplay, setTypesToDisplay] = useState([])\r\n  const pokemonTypeList = ['grass', 'poison', 'fire', 'flying', 'water', 'bug', 'normal', 'electric', 'ground', 'fairy', 'fighting', 'psychic', 'rock', 'steel', 'ice', 'ghost', 'dragon'];\r\n\r\n  const getPokemonData = async (id) => {\r\n    //Move this out somehow, to avoid calling on every render \r\n    try {\r\n      const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + id);\r\n      const pokemonPromise = await res.json();\r\n      return pokemonPromise;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const sortPokemonList = rawPokemonList.filter((poke) => {\r\n    if(text.input === \"\") {\r\n      return poke;\r\n    } else {\r\n      return poke.name.toLowerCase().includes(text.input);\r\n    }\r\n  })\r\n\r\n  const updatePokemonId = (e) => {\r\n    rawPokemonList.map(poke => {\r\n      if(poke.id == e.target.id) {\r\n        setPokemon([e.target.id, poke]);\r\n      }\r\n    })\r\n  }\r\n\r\n  const updateTypesToDisplay = (e) => {\r\n    if(typesToDisplay.includes(e.target.value)) {\r\n      const newTypesList = typesToDisplay.filter((type) => type !== e.target.value);\r\n      setTypesToDisplay(newTypesList);\r\n    } else {\r\n      setTypesToDisplay(typesToDisplay.push(e.target.value));\r\n    }\r\n  }\r\n\r\n  useEffect((i) => {\r\n    const promises = [];\r\n    for (let i = 1; i < 152; i++) {\r\n      promises.push(getPokemonData(i));\r\n    }\r\n    Promise.all(promises).then((results)=>{\r\n      setRawPokemonList(results);\r\n    })\r\n  }, []);\r\n\r\n  const PokemonTypeButton = (props) => {\r\n    const typeColour = PokeColour[props.typeString];\r\n    const colourRGB = [typeColour.slice(1, 3), typeColour.slice(3, 5), typeColour.slice(5, 7)];\r\n    const lighterColour = colourRGB.map(colour => (Math.round(parseInt(colour, 16) * 1.4))).join();\r\n    const darkerColour = colourRGB.map(colour => (Math.round(parseInt(colour, 16) * 0.6))).join();\r\n    let colour = 'rgb(0,0,0)';\r\n    if((Math.round(parseInt(colourRGB[2]) * 0.6) < 70)) {\r\n      colour = 'rgb(255,255,255)';\r\n    }\r\n    const gradientString = 'rgb(' + lighterColour + ')' + ', rgb(' + darkerColour + ')';\r\n    return (\r\n      <button style={{\r\n        backgroundImage: \"linear-gradient(120deg, \" + gradientString + \")\",\r\n        borderRadius: \"5px\",\r\n        height: '30px',\r\n        width: '80px',\r\n        color: colour}} value={props.typeString} onClick={updateTypesToDisplay}>\r\n          {props.typeString}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const PokemonCard = (props) => {\r\n    const colours = [];\r\n    let gradientString = \"\";\r\n    props.pokemonToUse.types.map((typeData) => (\r\n      colours.push(PokeColour[typeData.type.name])\r\n    ))\r\n    if(colours.length === 1) {\r\n      const colourRGB = [colours[0].slice(1, 3), colours[0].slice(3, 5), colours[0].slice(5, 7)];\r\n      const lighterColour = colourRGB.map(colour => (Math.round(parseInt(colour, 16) * 1.4))).join();\r\n      const darkerColour = colourRGB.map(colour => (Math.round(parseInt(colour, 16) * 0.6))).join();\r\n      gradientString = 'rgb(' + lighterColour + ')' + ', rgb(' + darkerColour + ')';\r\n    } else {\r\n      gradientString = colours[0] + ', ' + colours[1];\r\n    }\r\n    return (\r\n      <div style={{\r\n        backgroundImage: \"linear-gradient(120deg, \" + gradientString + \")\",\r\n        height: '200px',\r\n        borderRadius: '5px'}} id={props.pokemonToUse.id} onClick={updatePokemonId}>\r\n        <img src={'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/' + props.pokemonToUse.id + '.svg'} className='poke-img' id={props.pokemonToUse.id}/>\r\n        <div className='card-text-container'>\r\n          <p id={props.pokemonToUse.id}>{props.pokemonToUse.name}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className='content-parent'>\r\n      <div className='card-container'>\r\n        {sortPokemonList.map(poke=>(\r\n          <div className='card' id={poke.id}>\r\n            <PokemonCard pokemonToUse={poke} id={poke.id} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className='content-container'>\r\n        {(pokemonId === 0) ? (\r\n          <p>Click a pokemon!</p>\r\n        ) : (\r\n          <>\r\n          <img src={'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/' + pokemonId + '.svg'} className='big-poke-img'></img>\r\n          <p>Name - {pokemon.name}</p>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className='type-container'>\r\n      {pokemonTypeList.map((type) => (\r\n        <div className='type-button'>\r\n          <PokemonTypeButton typeString={type}></PokemonTypeButton>\r\n        </div>\r\n        ))}\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RenderPokemon;"]},"metadata":{},"sourceType":"module"}