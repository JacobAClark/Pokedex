{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\PokemonAbilities\\\\PokemonAbilities.js\";\nimport { motion } from \"framer-motion\";\nimport React from \"react\";\nimport './PokemonAbilities.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getAbilityName = ability => {\n  let name = \"\";\n  ability.names.map(nameData => {\n    if (nameData.language.name === \"en\") {\n      name = nameData.name;\n    }\n  });\n  return name;\n};\n\nconst RenderPokemonAbility = abilityData => {\n  const animateFromBottom = {\n    before: {\n      opacity: 0\n    },\n    onScreen: {\n      opacity: 1\n    },\n    after: {\n      opacity: 0\n    }\n  };\n  const effectEntries = abilityData.ability.effect_entries;\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"ability-button\",\n    variants: animateFromBottom,\n    initial: \"before\",\n    animate: \"onScreen\",\n    exit: \"after\",\n    children: effectEntries.map(effectData => effectData.language.name === \"en\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getAbilityName(abilityData.ability)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 23\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_c = RenderPokemonAbility;\nexport default RenderPokemonAbility;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemonAbility\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/PokemonAbilities/PokemonAbilities.js"],"names":["motion","React","getAbilityName","ability","name","names","map","nameData","language","RenderPokemonAbility","abilityData","animateFromBottom","before","opacity","onScreen","after","effectEntries","effect_entries","effectData"],"mappings":";AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;;;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAChC,MAAIC,IAAI,GAAG,EAAX;AACAD,EAAAA,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAmBC,QAAD,IAAc;AAC5B,QAAGA,QAAQ,CAACC,QAAT,CAAkBJ,IAAlB,KAA2B,IAA9B,EAAoC;AAChCA,MAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAhB;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH,CARD;;AAUA,MAAMK,oBAAoB,GAAIC,WAAD,IAAiB;AAE1C,QAAMC,iBAAiB,GAAG;AACtBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE;AADH,KADc;AAItBC,IAAAA,QAAQ,EAAE;AACRD,MAAAA,OAAO,EAAE;AADD,KAJY;AAOtBE,IAAAA,KAAK,EAAE;AACLF,MAAAA,OAAO,EAAE;AADJ;AAPe,GAA1B;AAaA,QAAMG,aAAa,GAAGN,WAAW,CAACP,OAAZ,CAAoBc,cAA1C;AACA,sBACI,QAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,SAAS,EAAC,gBAAtB;AAAuC,IAAA,QAAQ,EAAEN,iBAAjD;AAAoE,IAAA,OAAO,EAAC,QAA5E;AAAqF,IAAA,OAAO,EAAC,UAA7F;AAAwG,IAAA,IAAI,EAAC,OAA7G;AAAA,cACKK,aAAa,CAACV,GAAd,CAAmBY,UAAD,IACdA,UAAU,CAACV,QAAX,CAAoBJ,IAApB,KAA6B,IAA9B,gBACI;AAAA,6BACE;AAAA,kBAAIF,cAAc,CAACQ,WAAW,CAACP,OAAb;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,qBADJ,gBAKI,qCANP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA9BD;;KAAMM,oB;AAgCN,eAAeA,oBAAf","sourcesContent":["import { motion } from \"framer-motion\"\r\nimport React from \"react\"\r\nimport './PokemonAbilities.css'\r\n\r\nconst getAbilityName = (ability) => {\r\n    let name = \"\";\r\n    ability.names.map((nameData) => {\r\n        if(nameData.language.name === \"en\") {\r\n            name = nameData.name;\r\n        }\r\n    })\r\n    return name;\r\n}\r\n\r\nconst RenderPokemonAbility = (abilityData) => {\r\n\r\n    const animateFromBottom = {\r\n        before: {\r\n          opacity: 0,\r\n        },\r\n        onScreen: {\r\n          opacity: 1,\r\n        },\r\n        after: {\r\n          opacity: 0,\r\n        }\r\n      }\r\n\r\n\r\n    const effectEntries = abilityData.ability.effect_entries;\r\n    return (\r\n        <motion.div className='ability-button' variants={animateFromBottom} initial='before' animate='onScreen' exit='after'>\r\n            {effectEntries.map((effectData) => (\r\n                (effectData.language.name === \"en\") ? (\r\n                    <>\r\n                      <p>{getAbilityName(abilityData.ability)}</p>\r\n                    </>\r\n                ) : (\r\n                    <></>\r\n                )\r\n            ))}\r\n        </motion.div>\r\n\r\n    )\r\n}\r\n\r\nexport default RenderPokemonAbility;"]},"metadata":{},"sourceType":"module"}