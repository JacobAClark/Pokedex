{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\PokemonAbilities\\\\PokemonAbilities.js\";\nimport { motion } from \"framer-motion\";\nimport React, { useState } from \"react\";\nimport './PokemonAbilities.css';\nimport RenderPokemonAbilityBox from \"./PokemonAbilityBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const getAbilityName = ability => {\n  let name = \"\";\n  ability.names.map(nameData => {\n    if (nameData.language.name === \"en\") {\n      name = nameData.name;\n    }\n  });\n  return name;\n};\n\nconst RenderPokemonAbilityButton = props => {\n  const abilityData = props.abilityData;\n  const buttonAnim = {\n    before: {\n      y: '100vh',\n      opacity: 0\n    },\n    onScreen: {\n      y: '0',\n      opacity: 1\n    },\n    after: {\n      y: '-100vh',\n      opacity: 0\n    }\n  };\n  const effectEntries = abilityData.effect_entries;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"ability-button\",\n      variants: buttonAnim,\n      initial: \"before\",\n      animate: \"onScreen\",\n      exit: \"after\",\n      whileTap: {\n        scale: 0.8\n      },\n      onClick: () => props.updateAbilityToDisplay(abilityData),\n      children: React.Children.toArray(effectEntries.map(effectData => effectData.language.name === \"en\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: getAbilityName(abilityData)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = RenderPokemonAbilityButton;\nexport default RenderPokemonAbilityButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemonAbilityButton\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/PokemonAbilities/PokemonAbilities.js"],"names":["motion","React","useState","RenderPokemonAbilityBox","getAbilityName","ability","name","names","map","nameData","language","RenderPokemonAbilityButton","props","abilityData","buttonAnim","before","y","opacity","onScreen","after","effectEntries","effect_entries","scale","updateAbilityToDisplay","Children","toArray","effectData"],"mappings":";AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,wBAAP;AACA,OAAOC,uBAAP,MAAoC,qBAApC;;;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACvC,MAAIC,IAAI,GAAG,EAAX;AACAD,EAAAA,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAmBC,QAAD,IAAc;AAC5B,QAAGA,QAAQ,CAACC,QAAT,CAAkBJ,IAAlB,KAA2B,IAA9B,EAAoC;AAChCA,MAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAhB;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH,CARM;;AAUP,MAAMK,0BAA0B,GAAIC,KAAD,IAAW;AAC1C,QAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;AAEA,QAAMC,UAAU,GAAG;AACfC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,OADG;AAENC,MAAAA,OAAO,EAAE;AAFH,KADO;AAKfC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,CAAC,EAAE,GADK;AAERC,MAAAA,OAAO,EAAE;AAFD,KALK;AASfE,IAAAA,KAAK,EAAE;AACLH,MAAAA,CAAC,EAAE,QADE;AAELC,MAAAA,OAAO,EAAE;AAFJ;AATQ,GAAnB;AAeA,QAAMG,aAAa,GAAGP,WAAW,CAACQ,cAAlC;AACA,sBACE;AAAA,2BACE,QAAC,MAAD,CAAQ,GAAR;AAAY,MAAA,SAAS,EAAC,gBAAtB;AAAuC,MAAA,QAAQ,EAAEP,UAAjD;AAA6D,MAAA,OAAO,EAAC,QAArE;AAA8E,MAAA,OAAO,EAAC,UAAtF;AAAiG,MAAA,IAAI,EAAC,OAAtG;AAA8G,MAAA,QAAQ,EAAE;AAACQ,QAAAA,KAAK,EAAE;AAAR,OAAxH;AAAsI,MAAA,OAAO,EAAE,MAAMV,KAAK,CAACW,sBAAN,CAA6BV,WAA7B,CAArJ;AAAA,gBACGZ,KAAK,CAACuB,QAAN,CAAeC,OAAf,CAAuBL,aAAa,CAACZ,GAAd,CAAmBkB,UAAD,IACvCA,UAAU,CAAChB,QAAX,CAAoBJ,IAApB,KAA6B,IAA9B,gBACE;AAAA,+BACE;AAAA,oBAAIF,cAAc,CAACS,WAAD;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,uBADF,gBAKE,qCANoB,CAAvB;AADH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeH,CAlCD;;KAAMF,0B;AAoCN,eAAeA,0BAAf","sourcesContent":["import { motion } from \"framer-motion\"\r\nimport React, { useState } from \"react\"\r\nimport './PokemonAbilities.css'\r\nimport RenderPokemonAbilityBox from \"./PokemonAbilityBox\";\r\n\r\nexport const getAbilityName = (ability) => {\r\n    let name = \"\";\r\n    ability.names.map((nameData) => {\r\n        if(nameData.language.name === \"en\") {\r\n            name = nameData.name;\r\n        }\r\n    })\r\n    return name;\r\n}\r\n\r\nconst RenderPokemonAbilityButton = (props) => {\r\n    const abilityData = props.abilityData;\r\n\r\n    const buttonAnim = {\r\n        before: {\r\n          y: '100vh',\r\n          opacity: 0,\r\n        },\r\n        onScreen: {\r\n          y: '0',\r\n          opacity: 1,\r\n        },\r\n        after: {\r\n          y: '-100vh',\r\n          opacity: 0,\r\n        }\r\n    }\r\n\r\n    const effectEntries = abilityData.effect_entries;\r\n    return (\r\n      <>\r\n        <motion.div className='ability-button' variants={buttonAnim} initial='before' animate='onScreen' exit='after' whileTap={{scale: 0.8}} onClick={() => props.updateAbilityToDisplay(abilityData)}>\r\n          {React.Children.toArray(effectEntries.map((effectData) => (\r\n            (effectData.language.name === \"en\") ? (\r\n              <>\r\n                <p>{getAbilityName(abilityData)}</p>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )\r\n          )))}\r\n        </motion.div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default RenderPokemonAbilityButton;"]},"metadata":{},"sourceType":"module"}