{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { cold } from 'react-hot-loader';\nimport './App.css';\nimport RenderPokemonCards from './RenderPokemon/RenderPokemon.js';\nimport PokemonTypeButton from './PokemonTypeButton/PokemonTypeButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getPokemonData = async id => {\n  try {\n    const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + id);\n    const pokemonPromise = await res.json();\n    return pokemonPromise;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst App = () => {\n  _s();\n\n  const [inputString, setInputString] = useState(\"\");\n  const [rawPokemonList, setRawPokemonList] = useState([]);\n  const [pokemonToRender, setPokemonToRender] = useState([]);\n  const [pokemon, setPokemon] = useState([]);\n  const pokemonTypeList = ['grass', 'poison', 'fire', 'flying', 'water', 'bug', 'normal', 'electric', 'ground', 'fairy', 'fighting', 'psychic', 'rock', 'steel', 'ice', 'ghost', 'dragon'];\n  const [typesToDisplay, setTypesToDisplay] = useState([]);\n  useEffect(i => {\n    const promises = [];\n\n    for (let i = 1; i < 152; i++) {\n      promises.push(getPokemonData(i));\n    }\n\n    Promise.all(promises).then(results => {\n      setRawPokemonList(results);\n    });\n  }, []);\n\n  const updateInput = e => {\n    const lowerString = e.target.value.toLowerCase();\n    setInputString(lowerString);\n  };\n\n  const updatePokemon = idToChangeTo => {\n    rawPokemonList.map(poke => {\n      if (poke.id == idToChangeTo) {\n        setPokemon(poke);\n      }\n    });\n  };\n\n  const resetTypesToDisplay = e => {};\n\n  const updateTypesToDisplay = e => {\n    if (typesToDisplay.length === 0) {\n      const newTypesList = [e.target.value];\n      setTypesToDisplay(newTypesList);\n    } else {\n      if (typesToDisplay.includes(e.target.value)) {\n        const newTypesList = typesToDisplay.filter(type => type !== e.target.value);\n        setTypesToDisplay(newTypesList);\n      } else {\n        const newTypesList = [e.target.value];\n        setTypesToDisplay(typesToDisplay.concat(newTypesList));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn-icons.flaticon.com/png/512/868/premium/868596.png?token=exp=1647880908~hmac=5e802c3c8b8423596716ca9353212d17\",\n          className: \"poke-ball-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search For a Pokemon!\",\n          onChange: updateInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container\",\n        children: /*#__PURE__*/_jsxDEV(RenderPokemonCards, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"type-container\",\n        children: [pokemonTypeList.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"type-button\",\n          onClick: updateTypesToDisplay,\n          children: /*#__PURE__*/_jsxDEV(PokemonTypeButton, {\n            typeString: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" Reset! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: typesToDisplay.map(type => /*#__PURE__*/_jsxDEV(PokemonTypeButton, {\n            typeString: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: pokemonId === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click a pokemon!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RenderPokemonInfo, {\n        pokemon: pokemon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), \"    \"]\n  }, void 0, true);\n};\n\n_s(App, \"OzL0ntaSqXpLgTiyKOFyUEfCQEU=\");\n\n_c = App;\nexport default _c2 = cold(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/App.js"],"names":["React","useState","useEffect","cold","RenderPokemonCards","PokemonTypeButton","getPokemonData","id","res","fetch","pokemonPromise","json","e","console","log","App","inputString","setInputString","rawPokemonList","setRawPokemonList","pokemonToRender","setPokemonToRender","pokemon","setPokemon","pokemonTypeList","typesToDisplay","setTypesToDisplay","i","promises","push","Promise","all","then","results","updateInput","lowerString","target","value","toLowerCase","updatePokemon","idToChangeTo","map","poke","resetTypesToDisplay","updateTypesToDisplay","length","newTypesList","includes","filter","type","concat","pokemonId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { cold } from 'react-hot-loader';\nimport './App.css';\nimport RenderPokemonCards from './RenderPokemon/RenderPokemon.js';\nimport PokemonTypeButton from './PokemonTypeButton/PokemonTypeButton';\n\n\nconst getPokemonData = async (id) => {\n  try {\n    const res = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + id);\n    const pokemonPromise = await res.json();\n    return pokemonPromise;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst App = () => {\n  const [inputString, setInputString] = useState(\"\");\n  const [rawPokemonList, setRawPokemonList] = useState([]);\n  const [pokemonToRender, setPokemonToRender] = useState([]);\n  const [pokemon, setPokemon] = useState([]);\n  const pokemonTypeList = ['grass', 'poison', 'fire', 'flying', 'water', 'bug', 'normal', 'electric', 'ground', 'fairy', 'fighting', 'psychic', 'rock', 'steel', 'ice', 'ghost', 'dragon'];\n  const [typesToDisplay, setTypesToDisplay] = useState([]);\n\n\n  useEffect((i) => {\n    const promises = [];\n    for (let i = 1; i < 152; i++) {\n      promises.push(getPokemonData(i));\n    }\n    Promise.all(promises).then((results)=>{\n      setRawPokemonList(results);\n    })\n  }, []);\n\n  const updateInput = (e) => {\n    const lowerString = e.target.value.toLowerCase();\n    setInputString(lowerString);\n  }\n\n  const updatePokemon = (idToChangeTo) => {\n    rawPokemonList.map(poke => {\n      if(poke.id == idToChangeTo) {\n        setPokemon(poke);\n      }\n    })\n  }\n\n  const resetTypesToDisplay = (e) => {\n\n  }\n\n  const updateTypesToDisplay = (e) => {\n    if(typesToDisplay.length === 0) {\n      const newTypesList = [e.target.value];\n      setTypesToDisplay(newTypesList);\n    } else {\n      if(typesToDisplay.includes(e.target.value)) {\n        const newTypesList = typesToDisplay.filter((type) => type !== e.target.value);\n        setTypesToDisplay(newTypesList);\n      } else {\n        const newTypesList = [e.target.value];\n        setTypesToDisplay(typesToDisplay.concat(newTypesList));\n      }\n    }\n  }\n\n  return (\n    <>\n    <div className='sidebar-container'>\n      <div className='search-bar-container'>\n        <img src='https://cdn-icons.flaticon.com/png/512/868/premium/868596.png?token=exp=1647880908~hmac=5e802c3c8b8423596716ca9353212d17' className='poke-ball-img' />\n        <input type='text' placeholder='Search For a Pokemon!' onChange={updateInput}></input>\n      </div>\n      <div className='card-container'>\n        <RenderPokemonCards />\n      </div>\n      <div className='type-container'>\n        {pokemonTypeList.map((type) => (\n          <div className='type-button' onClick={updateTypesToDisplay}>\n            <PokemonTypeButton typeString={type}></PokemonTypeButton>\n          </div>\n        ))}\n        <button> Reset! </button>\n        <div>\n          {typesToDisplay.map((type) => (\n            <PokemonTypeButton typeString={type}></PokemonTypeButton>\n          ))}\n        </div>\n      </div>\n    </div>\n    <div className='content-container'>\n        {(pokemonId === 0) ? (\n          <p>Click a pokemon!</p>\n        ) : (\n          <RenderPokemonInfo pokemon={pokemon} />\n        )}\n      </div>    </>\n  );\n}\n\nexport default cold(App);"]},"metadata":{},"sourceType":"module"}