{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\PokemonAbilities\\\\PokemonAbilities.js\",\n    _s = $RefreshSig$();\n\nimport { motion } from \"framer-motion\";\nimport React, { useState } from \"react\";\nimport './PokemonAbilities.css';\nimport RenderPokemonAbilityBox from \"./PokemonAbilityBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const getAbilityName = ability => {\n  let name = \"\";\n  ability.names.map(nameData => {\n    if (nameData.language.name === \"en\") {\n      name = nameData.name;\n    }\n  });\n  return name;\n};\n\nconst RenderPokemonAbilityButton = props => {\n  _s();\n\n  const [displayAbility, setDisplayAbility] = useState(false);\n  const abilityData = props.abilityData;\n  const buttonAnim = {\n    before: {\n      y: '100vh',\n      opacity: 0\n    },\n    onScreen: {\n      y: '0',\n      opacity: 1\n    },\n    after: {\n      y: '-100vh',\n      opacity: 0\n    }\n  };\n  const effectEntries = abilityData.effect_entries;\n  console.log(abilityData);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ability-button-container\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"ability-button\",\n        variants: buttonAnim,\n        initial: \"before\",\n        animate: \"onScreen\",\n        exit: \"after\",\n        whileTap: {\n          scale: 0.8\n        },\n        onClick: () => displayAbility(!displayAbility),\n        children: effectEntries.map(effectData => effectData.language.name === \"en\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: getAbilityName(abilityData)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 19\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), displayAbility ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(RenderPokemonAbilityBox, {\n      ability: abilityData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RenderPokemonAbilityButton, \"fknEV1rYXFWzjLqIKlVxR1Ml0gg=\");\n\n_c = RenderPokemonAbilityButton;\nexport default RenderPokemonAbilityButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemonAbilityButton\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/PokemonAbilities/PokemonAbilities.js"],"names":["motion","React","useState","RenderPokemonAbilityBox","getAbilityName","ability","name","names","map","nameData","language","RenderPokemonAbilityButton","props","displayAbility","setDisplayAbility","abilityData","buttonAnim","before","y","opacity","onScreen","after","effectEntries","effect_entries","console","log","scale","effectData"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,wBAAP;AACA,OAAOC,uBAAP,MAAoC,qBAApC;;;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACvC,MAAIC,IAAI,GAAG,EAAX;AACAD,EAAAA,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAmBC,QAAD,IAAc;AAC5B,QAAGA,QAAQ,CAACC,QAAT,CAAkBJ,IAAlB,KAA2B,IAA9B,EAAoC;AAChCA,MAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAhB;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH,CARM;;AAUP,MAAMK,0BAA0B,GAAIC,KAAD,IAAW;AAAA;;AAC1C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMa,WAAW,GAAGH,KAAK,CAACG,WAA1B;AAEA,QAAMC,UAAU,GAAG;AACfC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,OADG;AAENC,MAAAA,OAAO,EAAE;AAFH,KADO;AAKfC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,CAAC,EAAE,GADK;AAERC,MAAAA,OAAO,EAAE;AAFD,KALK;AASfE,IAAAA,KAAK,EAAE;AACLH,MAAAA,CAAC,EAAE,QADE;AAELC,MAAAA,OAAO,EAAE;AAFJ;AATQ,GAAnB;AAeA,QAAMG,aAAa,GAAGP,WAAW,CAACQ,cAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AACA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA,6BACE,QAAC,MAAD,CAAQ,GAAR;AAAY,QAAA,SAAS,EAAC,gBAAtB;AAAuC,QAAA,QAAQ,EAAEC,UAAjD;AAA6D,QAAA,OAAO,EAAC,QAArE;AAA8E,QAAA,OAAO,EAAC,UAAtF;AAAiG,QAAA,IAAI,EAAC,OAAtG;AAA8G,QAAA,QAAQ,EAAE;AAACU,UAAAA,KAAK,EAAE;AAAR,SAAxH;AAAsI,QAAA,OAAO,EAAE,MAAMb,cAAc,CAAC,CAACA,cAAF,CAAnK;AAAA,kBACGS,aAAa,CAACd,GAAd,CAAmBmB,UAAD,IAChBA,UAAU,CAACjB,QAAX,CAAoBJ,IAApB,KAA6B,IAA9B,gBACE;AAAA,iCACE;AAAA,sBAAIF,cAAc,CAACW,WAAD;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,yBADF,gBAKE,qCANH;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAcIF,cAAD,gBACG,qCADH,gBAGG,QAAC,uBAAD;AAAyB,MAAA,OAAO,EAAEE;AAAlC;AAAA;AAAA;AAAA;AAAA,YAjBN;AAAA,kBADF;AAsBH,CA3CD;;GAAMJ,0B;;KAAAA,0B;AA6CN,eAAeA,0BAAf","sourcesContent":["import { motion } from \"framer-motion\"\r\nimport React, { useState } from \"react\"\r\nimport './PokemonAbilities.css'\r\nimport RenderPokemonAbilityBox from \"./PokemonAbilityBox\";\r\n\r\nexport const getAbilityName = (ability) => {\r\n    let name = \"\";\r\n    ability.names.map((nameData) => {\r\n        if(nameData.language.name === \"en\") {\r\n            name = nameData.name;\r\n        }\r\n    })\r\n    return name;\r\n}\r\n\r\nconst RenderPokemonAbilityButton = (props) => {\r\n    const [displayAbility, setDisplayAbility] = useState(false);\r\n    const abilityData = props.abilityData;\r\n\r\n    const buttonAnim = {\r\n        before: {\r\n          y: '100vh',\r\n          opacity: 0,\r\n        },\r\n        onScreen: {\r\n          y: '0',\r\n          opacity: 1,\r\n        },\r\n        after: {\r\n          y: '-100vh',\r\n          opacity: 0,\r\n        }\r\n    }\r\n\r\n    const effectEntries = abilityData.effect_entries;\r\n    console.log(abilityData)\r\n    return (\r\n      <>\r\n        <div className='ability-button-container'>\r\n          <motion.div className='ability-button' variants={buttonAnim} initial='before' animate='onScreen' exit='after' whileTap={{scale: 0.8}} onClick={() => displayAbility(!displayAbility)}>\r\n            {effectEntries.map((effectData) => (\r\n              (effectData.language.name === \"en\") ? (\r\n                <>\r\n                  <p>{getAbilityName(abilityData)}</p>\r\n                </>\r\n              ) : (\r\n                <></>\r\n              )\r\n            ))}\r\n          </motion.div>\r\n        </div>\r\n        {(displayAbility) ? (\r\n            <></>\r\n        ) : (\r\n            <RenderPokemonAbilityBox ability={abilityData} />\r\n        )}\r\n      </>\r\n    )\r\n}\r\n\r\nexport default RenderPokemonAbilityButton;"]},"metadata":{},"sourceType":"module"}