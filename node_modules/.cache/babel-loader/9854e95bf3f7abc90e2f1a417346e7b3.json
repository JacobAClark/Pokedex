{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\PokemonAbilities\\\\PokemonAbilities.js\",\n    _s = $RefreshSig$();\n\nimport { motion } from \"framer-motion\";\nimport React from \"react\";\nimport './PokemonAbilities.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const getAbilityName = ability => {\n  let name = \"\";\n  ability.names.map(nameData => {\n    if (nameData.language.name === \"en\") {\n      name = nameData.name;\n    }\n  });\n  return name;\n};\n\nconst RenderPokemonAbilityButton = abilityData => {\n  _s();\n\n  const [abilityToDisplay, setAbilityToDisplay] = useState([]);\n  const buttonAnim = {\n    before: {\n      y: '100vh',\n      opacity: 0\n    },\n    onScreen: {\n      y: '0',\n      opacity: 1\n    },\n    after: {\n      y: '-100vh',\n      opacity: 0\n    }\n  };\n  const effectEntries = abilityData.effect_entries;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ability-button-container\",\n      children: effectEntries.map(effectData => /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"ability-button\",\n        variants: buttonAnim,\n        initial: \"before\",\n        animate: \"onScreen\",\n        exit: \"after\",\n        whileTap: {\n          scale: 0.8\n        },\n        onClick: () => setAbilityToDisplay(abilityData.ability),\n        children: effectData.language.name === \"en\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: getAbilityName(abilityData)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 23\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(RenderPokemonAbilityButton, \"N684sJgVD9tfGXDDyMtLKe431cA=\");\n\n_c = RenderPokemonAbilityButton;\nexport default RenderPokemonAbilityButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemonAbilityButton\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/PokemonAbilities/PokemonAbilities.js"],"names":["motion","React","getAbilityName","ability","name","names","map","nameData","language","RenderPokemonAbilityButton","abilityData","abilityToDisplay","setAbilityToDisplay","useState","buttonAnim","before","y","opacity","onScreen","after","effectEntries","effect_entries","effectData","scale"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;;;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACvC,MAAIC,IAAI,GAAG,EAAX;AACAD,EAAAA,OAAO,CAACE,KAAR,CAAcC,GAAd,CAAmBC,QAAD,IAAc;AAC5B,QAAGA,QAAQ,CAACC,QAAT,CAAkBJ,IAAlB,KAA2B,IAA9B,EAAoC;AAChCA,MAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAhB;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH,CARM;;AAUP,MAAMK,0BAA0B,GAAIC,WAAD,IAAiB;AAAA;;AAChD,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CC,QAAQ,CAAC,EAAD,CAAxD;AAEA,QAAMC,UAAU,GAAG;AACfC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,OADG;AAENC,MAAAA,OAAO,EAAE;AAFH,KADO;AAKfC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,CAAC,EAAE,GADK;AAERC,MAAAA,OAAO,EAAE;AAFD,KALK;AASfE,IAAAA,KAAK,EAAE;AACLH,MAAAA,CAAC,EAAE,QADE;AAELC,MAAAA,OAAO,EAAE;AAFJ;AATQ,GAAnB;AAeA,QAAMG,aAAa,GAAGV,WAAW,CAACW,cAAlC;AACA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA,gBACKD,aAAa,CAACd,GAAd,CAAmBgB,UAAD,iBACf,QAAC,MAAD,CAAQ,GAAR;AAAY,QAAA,SAAS,EAAC,gBAAtB;AAAuC,QAAA,QAAQ,EAAER,UAAjD;AAA6D,QAAA,OAAO,EAAC,QAArE;AAA8E,QAAA,OAAO,EAAC,UAAtF;AAAiG,QAAA,IAAI,EAAC,OAAtG;AAA8G,QAAA,QAAQ,EAAE;AAACS,UAAAA,KAAK,EAAE;AAAR,SAAxH;AAAsI,QAAA,OAAO,EAAE,MAAMX,mBAAmB,CAACF,WAAW,CAACP,OAAb,CAAxK;AAAA,kBACImB,UAAU,CAACd,QAAX,CAAoBJ,IAApB,KAA6B,IAA9B,gBACC;AAAA,iCACE;AAAA,sBAAIF,cAAc,CAACQ,WAAD;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,yBADD,gBAKC;AANJ;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiBH,CApCD;;GAAMD,0B;;KAAAA,0B;AAsCN,eAAeA,0BAAf","sourcesContent":["import { motion } from \"framer-motion\"\r\nimport React from \"react\"\r\nimport './PokemonAbilities.css'\r\n\r\nexport const getAbilityName = (ability) => {\r\n    let name = \"\";\r\n    ability.names.map((nameData) => {\r\n        if(nameData.language.name === \"en\") {\r\n            name = nameData.name;\r\n        }\r\n    })\r\n    return name;\r\n}\r\n\r\nconst RenderPokemonAbilityButton = (abilityData) => {\r\n    const [abilityToDisplay, setAbilityToDisplay] = useState([]);\r\n\r\n    const buttonAnim = {\r\n        before: {\r\n          y: '100vh',\r\n          opacity: 0,\r\n        },\r\n        onScreen: {\r\n          y: '0',\r\n          opacity: 1,\r\n        },\r\n        after: {\r\n          y: '-100vh',\r\n          opacity: 0,\r\n        }\r\n    }\r\n\r\n    const effectEntries = abilityData.effect_entries;\r\n    return (\r\n      <>\r\n        <div className='ability-button-container'>\r\n            {effectEntries.map((effectData) => (\r\n                <motion.div className='ability-button' variants={buttonAnim} initial='before' animate='onScreen' exit='after' whileTap={{scale: 0.8}} onClick={() => setAbilityToDisplay(abilityData.ability)}>\r\n                  {(effectData.language.name === \"en\") ? (\r\n                    <>\r\n                      <p>{getAbilityName(abilityData)}</p>\r\n                    </>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default RenderPokemonAbilityButton;"]},"metadata":{},"sourceType":"module"}