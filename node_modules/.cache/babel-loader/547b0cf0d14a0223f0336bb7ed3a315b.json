{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaco\\\\Desktop\\\\Pokemon Project\\\\Pokedex\\\\pokedex\\\\src\\\\PokemonAbilities\\\\PokemonAbilities.js\";\nimport { motion } from \"framer-motion\";\nimport React from \"react\";\nimport './PokemonAbilities.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const getAbilityName = ability => {\n  console.log(ability);\n  let name = \"\";\n  ability.names.map(nameData => {\n    if (nameData.language.name === \"en\") {\n      name = nameData.name;\n    }\n  });\n  return name;\n};\n\nconst RenderPokemonAbilityButton = _ref => {\n  let {\n    abilityData,\n    updateAbilityToDisplay\n  } = _ref;\n  console.log(abilityData);\n  const buttonAnim = {\n    before: {\n      y: '100vh',\n      opacity: 0\n    },\n    onScreen: {\n      y: '0',\n      opacity: 1\n    },\n    after: {\n      y: '-100vh',\n      opacity: 0\n    }\n  };\n  const effectEntries = abilityData.effect_entries;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"ability-button\",\n      variants: buttonAnim,\n      initial: \"before\",\n      animate: \"onScreen\",\n      exit: \"after\",\n      whileTap: {\n        scale: 0.8\n      },\n      onClick: () => updateAbilityToDisplay(abilityData.ability),\n      children: effectEntries.map(effectData => effectData.language.name === \"en\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: getAbilityName(abilityData)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 23\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = RenderPokemonAbilityButton;\nexport default RenderPokemonAbilityButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderPokemonAbilityButton\");","map":{"version":3,"sources":["C:/Users/jaco/Desktop/Pokemon Project/Pokedex/pokedex/src/PokemonAbilities/PokemonAbilities.js"],"names":["motion","React","getAbilityName","ability","console","log","name","names","map","nameData","language","RenderPokemonAbilityButton","abilityData","updateAbilityToDisplay","buttonAnim","before","y","opacity","onScreen","after","effectEntries","effect_entries","scale","effectData"],"mappings":";AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;;;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,MAAIG,IAAI,GAAG,EAAX;AACAH,EAAAA,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAmBC,QAAD,IAAc;AAC5B,QAAGA,QAAQ,CAACC,QAAT,CAAkBJ,IAAlB,KAA2B,IAA9B,EAAoC;AAChCA,MAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAhB;AACH;AACJ,GAJD;AAKA,SAAOA,IAAP;AACH,CATM;;AAWP,MAAMK,0BAA0B,GAAG,QAA4C;AAAA,MAA1C;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAA0C;AAC3ET,EAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACA,QAAME,UAAU,GAAG;AACfC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,OADG;AAENC,MAAAA,OAAO,EAAE;AAFH,KADO;AAKfC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,CAAC,EAAE,GADK;AAERC,MAAAA,OAAO,EAAE;AAFD,KALK;AASfE,IAAAA,KAAK,EAAE;AACLH,MAAAA,CAAC,EAAE,QADE;AAELC,MAAAA,OAAO,EAAE;AAFJ;AATQ,GAAnB;AAeA,QAAMG,aAAa,GAAGR,WAAW,CAACS,cAAlC;AACA,sBACE;AAAA,2BACE,QAAC,MAAD,CAAQ,GAAR;AAAY,MAAA,SAAS,EAAC,gBAAtB;AAAuC,MAAA,QAAQ,EAAEP,UAAjD;AAA6D,MAAA,OAAO,EAAC,QAArE;AAA8E,MAAA,OAAO,EAAC,UAAtF;AAAiG,MAAA,IAAI,EAAC,OAAtG;AAA8G,MAAA,QAAQ,EAAE;AAACQ,QAAAA,KAAK,EAAE;AAAR,OAAxH;AAAsI,MAAA,OAAO,EAAE,MAAMT,sBAAsB,CAACD,WAAW,CAACT,OAAb,CAA3K;AAAA,gBACKiB,aAAa,CAACZ,GAAd,CAAmBe,UAAD,IACdA,UAAU,CAACb,QAAX,CAAoBJ,IAApB,KAA6B,IAA9B,gBACI;AAAA,+BACE;AAAA,oBAAIJ,cAAc,CAACU,WAAD;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,uBADJ,gBAKI,qCANP;AADL;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeH,CAjCD;;KAAMD,0B;AAmCN,eAAeA,0BAAf","sourcesContent":["import { motion } from \"framer-motion\"\r\nimport React from \"react\"\r\nimport './PokemonAbilities.css'\r\n\r\nexport const getAbilityName = (ability) => {\r\n    console.log(ability)\r\n    let name = \"\";\r\n    ability.names.map((nameData) => {\r\n        if(nameData.language.name === \"en\") {\r\n            name = nameData.name;\r\n        }\r\n    })\r\n    return name;\r\n}\r\n\r\nconst RenderPokemonAbilityButton = ( {abilityData, updateAbilityToDisplay}) => {\r\n    console.log(abilityData)\r\n    const buttonAnim = {\r\n        before: {\r\n          y: '100vh',\r\n          opacity: 0,\r\n        },\r\n        onScreen: {\r\n          y: '0',\r\n          opacity: 1,\r\n        },\r\n        after: {\r\n          y: '-100vh',\r\n          opacity: 0,\r\n        }\r\n    }\r\n\r\n    const effectEntries = abilityData.effect_entries;\r\n    return (\r\n      <>\r\n        <motion.div className='ability-button' variants={buttonAnim} initial='before' animate='onScreen' exit='after' whileTap={{scale: 0.8}} onClick={() => updateAbilityToDisplay(abilityData.ability)}>\r\n            {effectEntries.map((effectData) => (\r\n                (effectData.language.name === \"en\") ? (\r\n                    <>\r\n                      <p>{getAbilityName(abilityData)}</p>\r\n                    </>\r\n                ) : (\r\n                    <></>\r\n                )\r\n            ))}\r\n        </motion.div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default RenderPokemonAbilityButton;"]},"metadata":{},"sourceType":"module"}